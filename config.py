#!/usr/bin/env python3
import os
import time
import pickle

import fire

#from server.Thing import Thing
from lib.usb.ether import Ether
from lib import systemUtils as utils
from lib.usb.keyboard import Keyboard


class MainApp:
    def __init__(self, appDir="/etc/BSc", configName="config"):
        utils.log("START", module=self.__class__.__name__)
        # TODO:
        #self._thing = Thing("ID", "KEY", "URL", "ADDR")
        #self._thing.on_message = MainApp._on_message
        self._device = None
        self._appDir = appDir
        self._configName = configName

    @staticmethod
    def _on_message(self, userdata, message):
        pass

    def launch(self):
        utils.getRootPrivileges()
        try:
            with open(os.path.join(self._appDir, self._configName), "rb") as f:
                data = pickle.load(f)

            payloads = data.pop("payloads")
            deviceType = data.pop("deviceType").upper()

            if deviceType == "KEYBOARD":
                self._device = Keyboard(**data)
            elif deviceType == "ETHER":
                self._device = Ether(
                    bckPath=os.path.join(self._appDir, "bck"),
                    **data
                )
            else:
                raise RuntimeError(f"Unkonwn deviceType: {deviceType}")

            for payload in payloads:
                self._device.executePayload(**payload)

        except Exception as e:     # any exception while reading file
            utils.log(e, flag="DEBUG", module=self.__class__.__name__)
            data = None

        finally:
            # receive - execute command loop?
            self._device.tearDown()

    def setup(self, apt=True):
        utils.getRootPrivileges() 
        os.makedirs(self._appDir, exist_ok=True)
        initData = {
            "deviceType": "ETHER",
            "name": "test",
            "idVendor": "0x1d6b",
            "idProduct": "0x0104",
            "serial": "fedcba9876543210",
            "manufacturer": "BSC",
            "product": "BSC",
            "nfqueue": True,
            "payloads": [
                {
                   "scenario": "INJECT",
                   "code": "<script>alert(\"Hello World\");</script>",
                   "count": 3
                }
                #{
                #    "delay": 0.5,
                #    "key": "r",
                #    "leftGUI": True
                #},
                #{
                #    "delay": 0.5,
                #    "text": "calc.exe\n"
                #}
            ]
        }

        with open(os.path.join(self._appDir, self._configName), 'wb') as f:
            utils.log("Writing intial data", module=self.__class__.__name__)
            pickle.dump(initData, f)

        with open("/boot/config.txt", 'r') as f:
            bootOk = "dtparam=spi=on\ndtoverlay=dwc2" in f.read()

        if not bootOk:
            with open("/boot/config.txt", 'a') as f:
                utils.log(
                    "Modyfing /boot/config.txt",
                    module=self.__class__.__name__
                )
                f.write("dtparam=spi=on\ndtoverlay=dwc2\n")

        if apt:
            utils.aptInstall("dnsmasq", "tcpdump")

        utils.log("SETUP END", module=self.__class__.__name__)


if __name__ == "__main__":
    fire.Fire(MainApp)
