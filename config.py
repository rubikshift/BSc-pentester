#!/usr/bin/env python3
import os
import fire
import pickle
from lib.usb.ether import Ether
from urllib.parse import quote_plus
from lib import systemUtils as utils
from lib.usb.keyboard import Keyboard


class MainApp:
    def __init__(self, appDir="/etc/BSc", configName="config"):
        utils.log("START", moduleName=self.__class__.__name__)
        # TODO:
        # add thing initialization,
        # assumption: Thing provides communication protocol
        self._thing = None
        self._device = None
        self._appDir = appDir
        self._configName = configName

    def launch(self):
        try:
            with open(os.path.join(self._appDir, self._configName), "rb") as f:
                data = pickle.load(f)

            payloads = data.pop("payloads")
            deviceType = data.pop("deviceType").upper()

            if deviceType == "KEYBOARD":
                self._device = Keyboard(**data)
            elif deviceType == "ETHER":
                self._device = Ether(**data)
            else:
                raise RuntimeError(f"Unkonwn deviceType: {deviceType}")

            for payload in payloads:
                self._device.executePayload(**payload)

        except Exception as e:     # any exception while reading file
            utils.log(e, flag="DEBUG", moduleName=self.__class__.__name__)
            data = None

        finally:
            pass
            # receive - execute command loop?

    def setup(self):
        utils.getRootPrivileges()
        os.makedirs(self._appDir, exist_ok=True)
        initData = {
            "deviceType": "KEYBOARD",
            "name": "test",
            "idVendor": "0x1d6b",
            "idProduct": "0x0104",
            "serial": "fedcba9876543210",
            "manufacturer": "BSC",
            "product": "BSC",
            "payloads": [
                {
                    "delay": 1,
                    "key": "r",
                    "leftGUI": True
                },
                {
                    "delay": 1,
                    "text": "cmd\n"
                },
                {
                    "delay": 1,
                    "text": "dir\n"
                },
                {
                    "delay": 10,
                    "text": "exit\n"
                }
            ]
        }
        with open(os.path.join(self._appDir, self._configName), 'wb') as f:
            pickle.dump(initData, f)
        # config that has to be done only ONCE! (like installing packages)


if __name__ == "__main__":
    fire.Fire(MainApp)
