import os
import re
import subprocess
from time import sleep
from subprocess import Popen, PIPE
from lib import systemUtils as utils
from lib.usb.device import Device

def writeFile(path, text, mode):
	if os.geteuid() != 0:
		os.execvp('sudo', ['sudo', 'python3'] + sys.argv)
	opened_file = open(path, mode)
	opened_file.write(text)
	opened_file.close()


class Ether(Device):
	def __init__(self, name, idVendor, idProduct,
				 serial, manufacturer, product):

		file_path = "/boot/config.txt"
		append = "dtparam=spi=on\ndtoverlay=dwc2 \n"
		writeFile(file_path, append, 'a')

		file_path = "/boot/cmdline.txt"
		with open(file_path, 'r') as file:
			text = file.read()
		text = re.sub(r'(rootwait)', r'\1 modules-load=dwc2,g_ether ', text)
		writeFile(file_path, text, 'w')

		file_path = "/etc/dhcpcd.conf"
		text = "\ninterface usb0 \nstatic ip_address=192.168.100.1"
		writeFile(file_path, text, 'a')
		sleep(30) #safe value-can be lowered
		os.system("sudo service dhcpcd restart")
		
		process = subprocess.Popen('apt-get install -y dnsmasq', shell=True, executable="/bin/bash")
		process.wait()

		process = subprocess.Popen('apt-get install -y iptables-persistent', shell=True, executable="/bin/bash")
		process.wait()

		file_path = "/etc/dnsmasq.conf"
		text = "interface=usb0	\nlisten-address=192.168.100.1 \nbind-interfaces	\nserver=8.8.8.8	\ndomain-needed	\nbogus-priv	\ndhcp-range=192.168.100.50,192.168.100.150,12h	"
		writeFile(file_path, text, 'a')

		file_path = "/etc/sysctl.conf"
		text = "net.ipv4.ip_forward=1"
		writeFile(file_path, text, 'a')

		file_path = "/proc/sys/net/ipv4/ip_forward"
		text = "1"
		writeFile(file_path, text, 'w')

		os.system("sudo iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE")
		os.system("sudo iptables -A FORWARD -i wlan0 -o usb0 -m state --state RELATED,ESTABLISHED -j ACCEPT")
		os.system("sudo iptables -A FORWARD -i usb0 -o wlan0 -j ACCEPT")
		os.system("sudo iptables-save > /etc/iptables/rules.v4")
		
		process = subprocess.Popen('service  dnsmasq start', shell=True, executable="/bin/bash")
		process.wait()

		os.system("sudo reboot")