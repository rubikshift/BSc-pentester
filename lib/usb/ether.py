import os
import re
import shutil
import subprocess
from time import sleep
from subprocess import Popen, PIPE

from lib.usb.device import Device
from lib import systemUtils as utils


class Ether(Device):
    def __init__(self, name, idVendor, idProduct,
                 serial, manufacturer, product, bckPath):

        os.makedirs(bckPath, exist_ok=True)
        self._bckPath = bckPath
        self.files = {
            "dnsmasq": {
                "original": "/etc/dnsmasq.conf",
                "bck": os.path.join(bckPath, "dnsmasq.conf")
            },
            "sysctl": {
                "original": "/etc/sysctl.conf",
                "bck": os.path.join(bckPath, "sysctl.conf")
            },
            "rules.v4": {
                "original": "/etc/iptables/rules.v4",
                "bck": os.path.join(bckPath, "rules.v4")
            }
        }

        for _, item in self.files.items():
            shutil.copy(item["original"], item["bck"])

        utils.activateModules("dwc2", "g_ether")

        os.system("sudo ifconfig usb0 192.168.100.1 netmask 255.255.255.0 up")

        with open(self.files["dnsmasq"]["original"], 'a') as file:
            file.write("interface=usb0	\nlisten-address=192.168.100.1 \nbind-interfaces	\nserver=8.8.8.8	\ndomain-needed	\nbogus-priv	\ndhcp-range=192.168.100.50,192.168.100.150,12h	")

        with open(self.files["sysctl"]["original"], 'a') as file:
            file.write("net.ipv4.ip_forward=1")

        with open("/proc/sys/net/ipv4/ip_forward", 'w') as file:
            file.write('1')

        os.system("sudo iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE")
        os.system(
            "sudo iptables -A FORWARD -i wlan0 -o usb0 -m state --state RELATED,ESTABLISHED -j ACCEPT")
        os.system("sudo iptables -A FORWARD -i usb0 -o wlan0 -j ACCEPT")
        os.system("sudo iptables-save > /etc/iptables/rules.v4")

        output, error = Popen(
            ['service', 'dnsmasq', 'start'],
            stdout=PIPE,
            stderr=PIPE
        ).communicate()
        if error:
            utils.log(error, flag="DEBUG", module=self.__class__.__name__)
        if output:
            utils.log(output, module=self.__class__.__name__)

    def executePayload(self, **payload):
        super().executePayload(**payload)
        scenario = payload.pop("scenario", "")

    def tearDown(self, *args, **kwargs):
        super().tearDown(*args, **kwargs)
        for _, item in self.files.items():
            shutil.copy(item["bck"], item["original"])
