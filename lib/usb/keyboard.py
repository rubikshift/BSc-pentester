import os
from time import sleep
from lib.usb.device import Device
from subprocess import Popen, PIPE
from lib import systemUtils as utils

MAP = {
    'a': (0, 4), 'b': (0, 5), 'c': (0, 6),
    'd': (0, 7), 'e': (0, 8), 'f': (0, 9),
    'g': (0, 10), 'h': (0, 11), 'i': (0, 12),
    'j': (0, 13), 'k': (0, 14), 'l': (0, 15),
    'm': (0, 16), 'n': (0, 17), 'o': (0, 18),
    'p': (0, 19), 'q': (0, 20), 'r': (0, 21),
    's': (0, 22), 't': (0, 23), 'u': (0, 24),
    'v': (0, 25), 'w': (0, 26), 'x': (0, 27),
    'y': (0, 28), 'z': (0, 29), '1': (0, 30),
    '2': (0, 31), '3': (0, 32), '4': (0, 33),
    '5': (0, 34), '6': (0, 35), '7': (0, 36),
    '8': (0, 37), '9': (0, 38), '0': (0, 39),
    'A': (32, 4), 'B': (32, 5), 'C': (32, 6),
    'D': (32, 7), 'E': (32, 8), 'F': (32, 9),
    'G': (32, 10), 'H': (32, 11), 'I': (32, 12),
    'J': (32, 13), 'K': (32, 14), 'L': (32, 15),
    'M': (32, 16), 'N': (32, 17), 'O': (32, 18),
    'P': (32, 19), 'Q': (32, 20), 'R': (32, 21),
    'S': (32, 22), 'T': (32, 23), 'U': (32, 24),
    'V': (32, 25), 'W': (32, 26), 'X': (32, 27),
    'Y': (32, 28), 'Z': (32, 29), '!': (32, 30),
    '@': (32, 31), '#': (32, 32), '$': (32, 33),
    '%': (32, 34), '^': (32, 35), '&': (32, 36),
    '*': (32, 37), '(': (32, 38), ')': (32, 39),
    '-': (0, 45), '=': (0, 46), '[': (0, 47),
    ']': (0, 48), ';': (0, 51), '\'': (0, 52),
    '\\': (0, 49), ',': (0, 54), '.': (0, 55),
    '/': (0, 56), '`': (0, 53),
    '_': (32, 45), '+': (32, 46), '{': (32, 47),
    '}': (32, 48), ':': (32, 51), '\"': (32, 52),
    '|': (32, 49), '<': (32, 54), '>': (32, 55),
    '?': (32, 56), '~': (32, 53),
    '\n': (0, 40), '\t': (0, 43), '\x32': (0, 44),
    "ENTER": (0, 40), "DELETE": (0, 42),
    "ESC": (0, 41), "SPACEBAR": (0, 44),
    "CAPSLOCK": (0, 57), "TAB": (0, 43),
    "LCTRL": (0, 224), "LSHIFT": (0, 225),
    "LALT": (0, 226), "LGUI": (0, 227),
    "RCTRL": (0, 228), "RSHIFT": (0, 229),
    "RALT": (0, 230), "RGUI": (0, 231)
}


class Keyboard(Device):
    def _customConfig(self, *args, **kwargs):
        path = os.path.join(self._path, "functions", "hid.usb0")
        os.makedirs(path, exist_ok=True)

        with open(os.path.join(path, "protocol"), 'w') as file:
            file.write("1")

        with open(os.path.join(path, "subclass"), 'w') as file:
            file.write("1")

        with open(os.path.join(path, "report_length"), 'w') as file:
            file.write("8")

        with open(os.path.join(path, "report_desc"), 'wb') as file:
            file.write(b"\x05\x01\x09\x06\xa1\x01\x05\x07\x19\xe0\x29\xe7\x15\x00\x25\x01\x75\x01\x95\x08\x81\x02\x95\x01\x75\x08\x81\x03\x95\x05\x75\x01\x05\x08\x19\x01\x29\x05\x91\x02\x95\x01\x75\x03\x91\x03\x95\x06\x75\x08\x15\x00\x25\x65\x05\x07\x19\x00\x29\x65\x81\x00\xc0")

        os.symlink(
            path,
            os.path.join(self._path, "configs", "c.1", "hid.usb0")
        )

    def _out(self, report):
        utils.log(report, "DEBUG", moduleName=self.__class__.__name__)
        with open("/dev/hidg0", 'rb+') as file:
            file.write(report)

    def _pressKey(self, key, release=True, rightGUI=None, rightAlt=None,
                  rightShift=None, rightCtrl=None, leftGUI=None,
                  leftShift=None, leftAlt=None, leftCtrl=None):
        modifier = rightGUI is not None
        modifier = modifier << 1 | (rightAlt is not None)
        modifier = modifier << 1 | (rightShift is not None)
        modifier = modifier << 1 | (rightCtrl is not None)
        modifier = modifier << 1 | (leftGUI is not None)
        modifier = modifier << 1 | (leftAlt is not None)
        modifier = modifier << 1 | (leftShift is not None)
        modifier = modifier << 1 | (leftCtrl is not None)

        mod, code = MAP[key]

        report = [mod | modifier] + [0] + [code] + [0] * 5
        self._out(bytes(report))

        if release:
            self._out(bytes([0] * 8))

    def _writeString(self, text):
        for a in text:
            self._pressKey(a)
 
    def executePayload(self, delay=0, **payload):
        super().executePayload(**payload)
        utils.log(f"Delay: {delay}s", moduleName=self.__class__.__name__)
        sleep(delay)
        text = payload.pop("text", "")
        if "key" in payload:
            self._pressKey(**payload)
        self._writeString(text)
