import time
import paho.mqtt.client as mqtt
from api.Database import Database


def on_message(client, userdata, message):
    db = Database()
    data = {
                "payload": str(message.payload.decode("utf-8"))
                }
    db.AddPayload(data)
    print("receive message=", str(message.payload.decode("utf-8")))

def startSub():
    id = "ce5f2a5c-405f-47e0-8550-301468fcc8ff"
    key = "bf83db8f-0300-44d7-a6e5-8a7f24451609"
    broker_address = "165.22.121.233"

    db = Database()
    channels = db.GetAllPubChannels()

    client = mqtt.Client()
    client.on_message = on_message
    client.username_pw_set(id, key)
    client.connect(broker_address)
    client.loop_start()
    for channel in channels:
        print(channel["channel_pub_id"])
        client.subscribe(topic="channels/" + channel["channel_pub_id"] + "/messages")
    while True:
        time.sleep(1)
    print("disconnect")
    client.disconnect()
    client.loop_stop()


def executeSendOperation(channels, info):
    id = "ce5f2a5c-405f-47e0-8550-301468fcc8ff"
    key = "bf83db8f-0300-44d7-a6e5-8a7f24451609"
    broker_address = "165.22.121.233"

    client = mqtt.Client()
    client.username_pw_set(id, key)
    client.connect(broker_address)
    for channel in channels:
        client.publish(topic="channels/" + channel["channel_sub_id"] + "/messages", payload=info)
        time.sleep(0.01)


def startPubToAllRpi(info):
    db = Database()
    channels = db.GetAllSubChannels()
    executeSendOperation(channels, info)


def startPubToChosenRpi(info, externalId):
    db = Database()
    data = db.GetRpi(externalId)
    channel = data["channel_sub_id"]
    channels = [channel]
    executeSendOperation(channels, info)


